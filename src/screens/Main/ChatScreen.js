import React, { useState, useEffect, useRef } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TextInput,
    TouchableOpacity,
    FlatList,
    KeyboardAvoidingView,
    Platform,
    Alert,
    ActivityIndicator,
    StatusBar,
    Keyboard
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTheme } from '../../context/ThemeContext';

// –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã MoiMoi
const MOIMOI_RESPONSES = [
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è? üòä",
    "–û—Ç–ª–∏—á–Ω–æ! –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏! üí™",
    "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è! üåü",
    "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ! üìù",
    "–ü–æ–º–Ω–∏: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üéØ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —É—Å–ø–µ—Ö–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∏ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã! üíß",
    "–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üåà",
    "–ß—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ? –ü–æ–¥–µ–ª–∏—Å—å! üòÑ",
    "–í–µ—Ä—å –≤ —Å–µ–±—è! –¢—ã –º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏—á—å –ª—é–±—ã—Ö —Ü–µ–ª–µ–π! üí´",
    "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!",
    "–ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É! üë£",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ–º–Ω–∏ –æ –±–∞–ª–∞–Ω—Å–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞ ‚öñÔ∏è",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø! üéâ",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –º–µ–Ω—è —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! ‚ú®"
];

export default function ChatScreen() {
    const { colors, themeColor } = useTheme();
    const [messages, setMessages] = useState([]);
    const [inputText, setInputText] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [keyboardHeight, setKeyboardHeight] = useState(0);
    const flatListRef = useRef(null);
    const textInputRef = useRef(null);

    useEffect(() => {
        initializeChat();

        const keyboardDidShowListener = Keyboard.addListener(
            Platform.OS === 'ios' ? 'keyboardWillShow' : 'keyboardDidShow',
            (e) => {
                setKeyboardHeight(e.endCoordinates.height);
            }
        );

        const keyboardDidHideListener = Keyboard.addListener(
            Platform.OS === 'ios' ? 'keyboardWillHide' : 'keyboardDidHide',
            () => {
                setKeyboardHeight(0);
            }
        );

        return () => {
            keyboardDidShowListener.remove();
            keyboardDidHideListener.remove();
        };
    }, []);

    const initializeChat = async () => {
        await loadChatHistory();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç MoiMoi
        if (messages.length === 0) {
            setTimeout(() => {
                addMoiMoiMessage("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π MoiMoi! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ü–µ–ª—è–º–∏! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?");
            }, 1000);
        }
    };

    const loadChatHistory = async () => {
        try {
            const chatHistory = await AsyncStorage.getItem('chatHistory');
            if (chatHistory) {
                setMessages(JSON.parse(chatHistory));
            }
        } catch (error) {
            console.error('Error loading chat history:', error);
        }
    };

    const saveChatHistory = async (updatedMessages) => {
        try {
            await AsyncStorage.setItem('chatHistory', JSON.stringify(updatedMessages));
        } catch (error) {
            console.error('Error saving chat history:', error);
        }
    };

    const addMoiMoiMessage = (text) => {
        const newMessage = {
            id: Date.now().toString() + '_moimoi',
            text: text,
            isUser: false,
            timestamp: new Date().toISOString(),
        };
        const updatedMessages = [...messages, newMessage];
        setMessages(updatedMessages);
        saveChatHistory(updatedMessages);

        setTimeout(() => {
            flatListRef.current?.scrollToEnd({ animated: true });
        }, 100);
    };

    const getAIResponse = (userMessage) => {
        const lowerMessage = userMessage.toLowerCase();

        // –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (lowerMessage.includes('–ø—Ä–∏–≤—ã—á') || lowerMessage.includes('habit')) {
            return "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! üéØ –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–π –ø—Ä–∏–≤—ã—á–∫—É –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π –≤—Ä–µ–º—è! –ì–ª–∞–≤–Ω–æ–µ - –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ!";
        }

        if (lowerMessage.includes('—É—Å—Ç–∞–ª') || lowerMessage.includes('—É—Å—Ç–∞–ª–æ—Å—Ç—å') || lowerMessage.includes('—É—Å—Ç–∞–≤')) {
            return "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è! üò¥ –í–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ –æ—Ç–¥—ã—Ö–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞! –ò –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–æ–Ω!";
        }

        if (lowerMessage.includes('–º–æ—Ç–∏–≤–∞—Ü') || lowerMessage.includes('motivation') || lowerMessage.includes('–ª–µ–Ω—å')) {
            return "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™ –í—Å–ø–æ–º–Ω–∏, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª. –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—à—å—Å—è!";
        }

        if (lowerMessage.includes('—Å–ø–∞—Å–∏–±–æ') || lowerMessage.includes('thank') || lowerMessage.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
            return "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòä –¢—ã –¥–µ–ª–∞–µ—à—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —É—Å–ø–µ—Ö–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü";
        }

        if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
            return "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è? –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö!";
        }

        if (lowerMessage.includes('—Ü–µ–ª') || lowerMessage.includes('goal') || lowerMessage.includes('–º–µ—á—Ç')) {
            return "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ü–µ–ª—è—Ö! üéØ –†–∞–∑–±–µ–π –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏. –ß—Ç–æ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?";
        }

        if (lowerMessage.includes('–ø—Ä–æ–±–ª–µ–º') || lowerMessage.includes('—Ç—Ä—É–¥–Ω–æ—Å—Ç') || lowerMessage.includes('—Å–ª–æ–∂–Ω')) {
            return "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã... ü§ó –ü–æ–º–Ω–∏: –∫–∞–∂–¥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º!";
        }

        if (lowerMessage.includes('—É—Å–ø–µ—Ö') || lowerMessage.includes('–¥–æ—Å—Ç–∏–∂') || lowerMessage.includes('–≥–æ—Ä–∂')) {
            return "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! üéâ –Ø —Ç–∞–∫ —Ä–∞–¥ –∑–∞ —Ç–µ–±—è! –ü–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å? –¢–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å!";
        }

        if (lowerMessage.includes('—Å–æ–Ω') || lowerMessage.includes('—Å–ø–∞—Ç—å') || lowerMessage.includes('–±–µ—Å—Å–æ–Ω–Ω–∏—Ü')) {
            return "–°–æ–Ω –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üõå –°—Ç–∞—Ä–∞–π—Å—è —Å–ø–∞—Ç—å 7-9 —á–∞—Å–æ–≤, –∏–∑–±–µ–≥–∞–π —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –∏ —Å–æ–∑–¥–∞–π —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ!";
        }

        if (lowerMessage.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω') || lowerMessage.includes('—Ä–∞—Å–ø–∏—Å–∞–Ω') || lowerMessage.includes('–≥—Ä–∞—Ñ–∏–∫')) {
            return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üìÖ –ù–∞—á–Ω–∏ —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å, —Ä–∞—Å—Å—Ç–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞!";
        }

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const lastUserMessage = messages.filter(m => m.isUser).pop();
        if (lastUserMessage) {
            const lastLower = lastUserMessage.text.toLowerCase();

            if (lastLower.includes('–ø—Ä–∏–≤—ã—á') && lowerMessage.includes('–∫–∞–∫')) {
                return "–ß—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: 1) –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ 2) –ü—Ä–∏–≤—è–∂–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–∏—Ç—É–∞–ª—É 3) –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å 4) –ù–µ —Ä—É–≥–∞–π —Å–µ–±—è –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∏!";
            }

            if (lastLower.includes('—Ü–µ–ª') && (lowerMessage.includes('–¥–æ—Å—Ç–∏—á—å') || lowerMessage.includes('–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å'))) {
                return "–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π SMART-–º–µ—Ç–æ–¥: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ò–∑–º–µ—Ä–∏–º—ã–µ, –î–æ—Å—Ç–∏–∂–∏–º—ã–µ, –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ, –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ü–µ–ª–∏!";
            }
        }

        // –û–±—â–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        const generalResponses = [
            "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è! üòä –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –≤–∞–∂–µ–Ω –∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
            "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ!",
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üí≠ –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º! –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç?",
            "–ì–æ—Ä–∂—É—Å—å —Ç–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! üöÄ –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç—Ä—É–¥–Ω–æ!",
            "–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º! üåà –í–µ—Ä—å –≤ —Å–µ–±—è –∏ —Å–≤–æ–∏ —Å–∏–ª—ã!",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —É—Å–ø–µ—Ö–∞–º! üèÜ –¶–µ–Ω–∏ –∫–∞–∂–¥—ã–π —Å–≤–æ–π —à–∞–≥!",
            "–¢—ã –º–æ–∂–µ—à—å –≤—Å—ë, —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å! üí´ –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏!",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! üåª –ò—Å–ø–æ–ª—å–∑—É–π –µ—ë –ø–æ –º–∞–∫—Å–∏–º—É–º—É!",
            "–¢—ã —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ! ‚ú® –î–æ–≤–µ—Ä—è–π —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –ø—É—Ç–∏!",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –º—ã—Å–ª—å! üí° –†–∞–∑–≤–∏–≤–∞–π –µ—ë –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–µ!"
        ];

        return generalResponses[Math.floor(Math.random() * generalResponses.length)];
    };

    const sendMessage = async () => {
        if (inputText.trim() && !isLoading) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
            const userMessage = {
                id: Date.now().toString() + '_user',
                text: inputText.trim(),
                isUser: true,
                timestamp: new Date().toISOString(),
            };

            const updatedMessages = [...messages, userMessage];
            setMessages(updatedMessages);
            saveChatHistory(updatedMessages);

            const userMessageText = inputText.trim();
            setInputText('');
            setIsLoading(true);

            // –§–æ–∫—É—Å –Ω–∞ –∏–Ω–ø—É—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (textInputRef.current) {
                textInputRef.current.focus();
            }

            try {
                // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
                setTimeout(() => {
                    const aiResponse = getAIResponse(userMessageText);
                    addMoiMoiMessage(aiResponse);
                    setIsLoading(false);
                }, 1000 + Math.random() * 1000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1-2 —Å–µ–∫—É–Ω–¥—ã

            } catch (error) {
                console.error('Error sending message:', error);
                // Fallback –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                const fallbackResponse = "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏! üòÖ –ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?";
                addMoiMoiMessage(fallbackResponse);
                setIsLoading(false);
            }
        }
    };

    const clearChat = () => {
        Alert.alert(
            '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?',
            [
                {
                    text: '–û—Ç–º–µ–Ω–∞',
                    style: 'cancel'
                },
                {
                    text: '–û—á–∏—Å—Ç–∏—Ç—å',
                    style: 'destructive',
                    onPress: () => {
                        setMessages([]);
                        saveChatHistory([]);
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                        setTimeout(() => {
                            addMoiMoiMessage("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π MoiMoi! üòä –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?");
                        }, 500);
                    },
                },
            ]
        );
    };

    const renderMessage = ({ item }) => (
        <View style={[
            styles.messageContainer,
            item.isUser ? styles.userMessage : styles.moiMoiMessage
        ]}>
            <View style={[
                styles.messageBubble,
                item.isUser ?
                    [styles.userBubble, { backgroundColor: themeColor }] :
                    [styles.moiMoiBubble, { backgroundColor: colors.card, borderColor: colors.border }]
            ]}>
                <Text style={[
                    styles.messageText,
                    item.isUser ? styles.userMessageText : [styles.moiMoiMessageText, { color: colors.text }]
                ]}>
                    {item.text}
                </Text>
            </View>
            <Text style={[styles.timestamp, { color: colors.textSecondary }]}>
                {new Date(item.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                })}
            </Text>
        </View>
    );

    return (
        <View style={[styles.container, { backgroundColor: colors.background }]}>
            <StatusBar backgroundColor={themeColor} barStyle="light-content" />

            {/* Messages List */}
            <FlatList
                ref={flatListRef}
                data={messages}
                renderItem={renderMessage}
                keyExtractor={(item) => item.id}
                style={styles.messagesList}
                contentContainerStyle={[
                    styles.messagesContent,
                    {
                        backgroundColor: colors.background,
                        paddingBottom: 10
                    }
                ]}
                onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
                onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}
                ListEmptyComponent={
                    <View style={styles.emptyState}>
                        <Ionicons name="chatbubbles-outline" size={64} color={themeColor} />
                        <Text style={[styles.emptyText, { color: colors.text }]}>
                            –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å MoiMoi!
                        </Text>
                        <Text style={[styles.emptySubtext, { color: colors.textSecondary }]}>
                            –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö, —Ü–µ–ª—è—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å
                        </Text>
                    </View>
                }
                keyboardShouldPersistTaps="handled"
            />

            {/* Input Area —Å —É—á–µ—Ç–æ–º –≤—ã—Å–æ—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã */}
            <View style={[
                styles.inputContainer,
                {
                    backgroundColor: colors.card,
                    borderTopColor: colors.border,
                    paddingBottom: Platform.OS === 'ios' ? keyboardHeight : 10,
                    transform: [{ translateY: -keyboardHeight }]
                }
            ]}>
                <TouchableOpacity
                    style={styles.clearButton}
                    onPress={clearChat}
                >
                    <Ionicons name="trash-outline" size={24} color={colors.textSecondary} />
                </TouchableOpacity>

                <TextInput
                    ref={textInputRef}
                    style={[
                        styles.textInput,
                        {
                            backgroundColor: colors.background,
                            borderColor: colors.border,
                            color: colors.text
                        }
                    ]}
                    value={inputText}
                    onChangeText={setInputText}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    placeholderTextColor={colors.textSecondary}
                    multiline
                    maxLength={500}
                    editable={!isLoading}
                    onSubmitEditing={sendMessage}
                    returnKeyType="send"
                    blurOnSubmit={false}
                />
                <TouchableOpacity
                    style={[
                        styles.sendButton,
                        { backgroundColor: themeColor },
                        (!inputText.trim() || isLoading) && styles.sendButtonDisabled
                    ]}
                    onPress={sendMessage}
                    disabled={!inputText.trim() || isLoading}
                >
                    {isLoading ? (
                        <ActivityIndicator size="small" color="white" />
                    ) : (
                        <Ionicons
                            name="send"
                            size={20}
                            color="white"
                        />
                    )}
                </TouchableOpacity>
            </View>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    messagesList: {
        flex: 1,
    },
    messagesContent: {
        padding: 16,
        minHeight: '100%',
    },
    messageContainer: {
        marginBottom: 16,
        maxWidth: '85%',
    },
    userMessage: {
        alignSelf: 'flex-end',
        alignItems: 'flex-end',
    },
    moiMoiMessage: {
        alignSelf: 'flex-start',
        alignItems: 'flex-start',
    },
    messageBubble: {
        padding: 12,
        borderRadius: 18,
        marginBottom: 4,
    },
    userBubble: {
        borderBottomRightRadius: 4,
    },
    moiMoiBubble: {
        borderBottomLeftRadius: 4,
        borderWidth: 1,
    },
    messageText: {
        fontSize: 16,
        lineHeight: 20,
    },
    userMessageText: {
        color: 'white',
    },
    moiMoiMessageText: {
        color: '#333',
    },
    timestamp: {
        fontSize: 12,
        marginTop: 2,
        opacity: 0.7,
    },
    inputContainer: {
        flexDirection: 'row',
        alignItems: 'flex-end',
        padding: 16,
        paddingTop: 10,
        borderTopWidth: 1,
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
    },
    textInput: {
        flex: 1,
        borderWidth: 1,
        borderRadius: 20,
        paddingHorizontal: 16,
        paddingVertical: Platform.OS === 'ios' ? 12 : 8,
        marginHorizontal: 12,
        maxHeight: 100,
        fontSize: 16,
        textAlignVertical: 'center',
    },
    sendButton: {
        width: 44,
        height: 44,
        borderRadius: 22,
        justifyContent: 'center',
        alignItems: 'center',
    },
    sendButtonDisabled: {
        opacity: 0.5,
    },
    clearButton: {
        padding: 8,
        justifyContent: 'center',
        alignItems: 'center',
    },
    emptyState: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: 100,
    },
    emptyText: {
        fontSize: 18,
        marginTop: 16,
        fontWeight: '500',
        textAlign: 'center',
    },
    emptySubtext: {
        fontSize: 14,
        marginTop: 8,
        textAlign: 'center',
        lineHeight: 20,
        paddingHorizontal: 20,
    },
});