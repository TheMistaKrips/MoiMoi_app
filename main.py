import os
import argparse
from pathlib import Path

def should_skip_directory(dir_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    skip_dirs = {
        'node_modules', '.git', 'build', 'dist', 'coverage', 
        '.next', '.nuxt', '.cache', 'assets', 'static',
        'public', '.vscode', '.idea', '__pycache__', 'cache',
        'logs', 'temp', 'tmp', 'vendor', 'bin', 'obj'
    }
    return dir_name in skip_dirs or dir_name.startswith('.')

def should_skip_file(file_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª"""
    skip_files = {
        'package.json', 'package-lock.json', 'yarn.lock',
        'tsconfig.json', 'webpack.config.js', '.eslintrc.js',
        '.prettierrc', 'babel.config.js', 'next.config.js',
        'jest.config.js', 'vue.config.js', 'nuxt.config.js',
        '.gitignore', '.env', '.env.local', 'README.md'
    }
    return file_name in skip_files

def is_target_file(file_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ü–µ–ª–µ–≤—ã–º (JS/JSX/TS/TSX –∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã)"""
    target_extensions = {
        '.js', '.jsx', '.ts', '.tsx', '.vue', '.svelte',
        '.css', '.scss', '.less', '.html', '.htm', '.json',
        '.py', '.java', '.cpp', '.c', '.h', '.cs', '.php',
        '.rb', '.go', '.rs', '.swift', '.kt', '.dart'
    }
    return any(file_name.endswith(ext) for ext in target_extensions)

def get_file_category(file_extension):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    categories = {
        '.js': 'JavaScript',
        '.jsx': 'React JSX',
        '.ts': 'TypeScript', 
        '.tsx': 'React TypeScript',
        '.vue': 'Vue',
        '.svelte': 'Svelte',
        '.py': 'Python',
        '.html': 'HTML',
        '.css': 'CSS',
        '.scss': 'SCSS',
        '.less': 'LESS',
        '.json': 'JSON',
        '.java': 'Java',
        '.cpp': 'C++',
        '.c': 'C',
        '.cs': 'C#',
        '.php': 'PHP',
        '.rb': 'Ruby',
        '.go': 'Go',
        '.rs': 'Rust',
        '.swift': 'Swift',
        '.kt': 'Kotlin',
        '.dart': 'Dart'
    }
    return categories.get(file_extension, 'Other')

def format_file_header(file_path, relative_path, category):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞"""
    header = []
    header.append("‚ïî" + "‚ïê" * 78 + "‚ïó")
    header.append(f"‚ïë –§–ê–ô–õ: {relative_path:<70} ‚ïë")
    header.append(f"‚ïë –ö–ê–¢–ï–ì–û–†–ò–Ø: {category:<65} ‚ïë")
    header.append(f"‚ïë –ü–û–õ–ù–´–ô –ü–£–¢–¨: {file_path:<64} ‚ïë")
    header.append("‚ïö" + "‚ïê" * 78 + "‚ïù")
    return '\n'.join(header)

def format_file_footer():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–≤–∞–ª —Ñ–∞–π–ª–∞"""
    return "\n" + "‚îÄ" * 80 + "\n"

def collect_source_files(root_dir, output_file):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ output_file"""
    
    root_path = Path(root_dir)
    files_by_category = {}
    total_files = 0
    
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for root, dirs, files in os.walk(root_dir):
        # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        dirs[:] = [d for d in dirs if not should_skip_directory(d)]
        
        for file in files:
            if should_skip_file(file):
                continue
                
            if is_target_file(file):
                file_path = Path(root) / file
                relative_path = file_path.relative_to(root_path)
                file_extension = file_path.suffix.lower()
                category = get_file_category(file_extension)
                
                if category not in files_by_category:
                    files_by_category[category] = []
                
                files_by_category[category].append((file_path, relative_path))
                total_files += 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –≤ {len(files_by_category)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    with open(output_file, 'w', encoding='utf-8') as out_f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        out_f.write("=" * 80 + "\n")
        out_f.write(f"–ò–°–•–û–î–ù–´–ô –ö–û–î –ü–†–û–ï–ö–¢–ê\n")
        out_f.write(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}\n")
        out_f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n")
        out_f.write("=" * 80 + "\n\n")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for category in sorted(files_by_category.keys()):
            files_in_category = files_by_category[category]
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            out_f.write("\n" + "‚ñ†" * 80 + "\n")
            out_f.write(f"–ö–ê–¢–ï–ì–û–†–ò–Ø: {category} ({len(files_in_category)} —Ñ–∞–π–ª–æ–≤)\n")
            out_f.write("‚ñ†" * 80 + "\n\n")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏
            for file_path, relative_path in sorted(files_in_category, key=lambda x: str(x[1])):
                try:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                    out_f.write(format_file_header(str(file_path), str(relative_path), category))
                    out_f.write("\n\n")
                    
                    # –ß–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    with open(file_path, 'r', encoding='utf-8') as in_f:
                        content = in_f.read().rstrip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ
                        out_f.write(content)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥–≤–∞–ª —Ñ–∞–π–ª–∞
                    out_f.write(format_file_footer())
                    
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {relative_path}")
                    
                except UnicodeDecodeError:
                    try:
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
                        with open(file_path, 'r', encoding='cp1251') as in_f:
                            content = in_f.read().rstrip()
                            out_f.write(content)
                        out_f.write(format_file_footer())
                        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω (Windows-1251): {relative_path}")
                    except Exception as e:
                        out_f.write(f"// ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}\n")
                        out_f.write(format_file_footer())
                        print(f"‚ùå –û—à–∏–±–∫–∞: {relative_path} - {e}")
                        
                except Exception as e:
                    out_f.write(f"// ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}\n")
                    out_f.write(format_file_footer())
                    print(f"‚ùå –û—à–∏–±–∫–∞: {relative_path} - {e}")

def main():
    parser = argparse.ArgumentParser(
        description='üìÅ –°–±–æ—Ä—â–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º –∫–æ–¥–æ–º',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--input', '-i', default='.', 
                       help='–í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)')
    parser.add_argument('--output', '-o', default='project_code.txt',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é project_code.txt)')
    
    args = parser.parse_args()
    
    input_dir = os.path.abspath(args.input)
    output_file = args.output
    
    if not os.path.exists(input_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞...")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {input_dir}")
    print(f"üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print("-" * 60)
    
    collect_source_files(input_dir, output_file)
    
    print("-" * 60)
    print(f"üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÑ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")

if __name__ == "__main__":
    main()